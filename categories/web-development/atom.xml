<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Web Development | Divya Manian]]></title>
  <link href="http://nimbupani.github.com/categories/web-development/atom.xml" rel="self"/>
  <link href="http://nimbupani.github.com/"/>
  <updated>2013-05-09T17:23:49-07:00</updated>
  <id>http://nimbupani.github.com/</id>
  <author>
    <name><![CDATA[Divya Manian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Diversity in Conferences]]></title>
    <link href="http://nimbupani.github.com/diversity-in-conferences.html"/>
    <updated>2013-05-09T16:54:00-07:00</updated>
    <id>http://nimbupani.github.com/diversity-in-conferences</id>
    <content type="html"><![CDATA[<p>I have resisted the urge to contribute my thoughts every time drama around women and  minorities in technology occurs. I thought instead I would share with you some of the actions I have taken in various roles to try to make diversity more visible in conferences around web technology.</p>

<h1>As a Conference Organizer</h1>

<p>It was only when I took responsibility of selecting speakers for W3Conf that I realised how many of my first choices were just names I had heard of. It became very clear that merit played almost no part in the speaker selection: visibility did.</p>

<p>I also noticed my initial reluctance to choose first-time speakers as I didn't want my conference to "fail" (I am guessing this is fairly a common concern), and hence tried to select popular speakers. This does help drive some registrations from those who want to see such speakers in person. But then again, having only 1 or 2 of them would suffice.</p>

<p>If you are looking for these popular speakers to promote your event and boost the registrations through such promotions, you can forget that. Unless each speaker tirelessly blogs, tweets, and talks about your event at regular intervals, the impact of them talking about your event is fairly minimal. If this was a reason for you to choose only popular speakers, then you should probably try another tactic.</p>

<p>Many conference organizers also fear having speakers who are boring or who might get stage fright and hence are very cautious in only chosing those who have proven themselves worthy as speakers. For W3Conf, I was confident that getting speakers who were interesting and worked on interesting projects was more important than their ability to speak or present.</p>

<p>I was very happy to see this was validated as the passion of each of the speakers came across as a far more compelling force than their articulation or their ability to punctuate their words with pauses.</p>

<h2>Where to find these people?</h2>

<p>I am very lucky to be in a place (metaphorically and physically) that puts me in touch with interesting people on a fairly regular basis without even trying to find them. Even then, I blanked when I was starting with who to select for the speakers for W3Conf.</p>

<p>One of the tricks I employed was to find an acknowledged expert in a field I was looking for a speaker in, and trawl the list of people <strong><em>they</em></strong> follow. I followed links to open-source projects and then reached out to them via email or Twitter.</p>

<p>I also asked people I trusted for names of people who were not well known but worked on interesting projects.</p>

<h2>What about diversity?</h2>

<p>It was always at the back of my mind to make this conference as diverse as possible. I didn't set out wanting to tick off a quota, but rather having a healthy mix of people from various backgrounds working on interesting stuff.</p>

<h2>What about quotas for conferences?</h2>

<p>I have come across conference organizers having a check list ("we hope to have 2 women speakers in our conference"). While it would be a good success metric, I do not think having it as the only factor helps anyone. People who are requested to speak at conferences in that manner get disgusted at being token speakers.</p>

<p>If you are a conference organizer, don't reach out to people suggesting they have been contacted only because you are obligated to fill your quota.</p>

<h2>What about reverse call for speakers?</h2>

<p>The idea looks great at first glance, but I am afraid the same challenge of only recalling popular names that had impressed the conference organizers would manifest itself even more significantly in the audience. Most of them wouldn't know which speaker would be worth listening to because they would have even less of an opportunity to come across people working on interesting projects. I also think one of the primary reasons people attend conferences is to find out about what interesting projects exist.</p>

<h1>As a Speaker</h1>

<p>Over the last two years I have given more than 20 talks, which has given me some level of visibility/name recognition in web technology. This means I get asked to speak many times at conferences most of which I have to decline because of work schedule conflicts.</p>

<p>I also know from my experience how much effort it is to select speakers, so I always ask the organizers if they would like some suggestions on who would be good speakers for their conference. Almost always they welcome suggestions and I send a list of those who I think should be heard from more. Invariably they are a mix of people who are less-prominent, but do exceptional work. Diversity is at the heart of such lists.</p>

<h1>As an Employee of a Company that Sponsors Events</h1>

<p>I work at Adobe which sponsors many events. I am also in a position to recommend events to sponsor. I try to recommend relevant events that may not be prominent but work on having as many people as possible from diverse backgrounds to attend or speak. They may or may not have charters that state their commitment to diversity, but nevertheless their actions speak louder than words.</p>

<p>I am also trying to push for sponsorships of events that show clear commitment to diversity in their speakers and/or attendance profiles. One thing I have learnt over the course of working at American companies is your views are most often heard, and while immediate actions may not be possible, the more people who strongly present the case, the earlier shifts can happen. So, if you think you are a mere cog in the wheel of a large corporation, think again. You have more power than you think.</p>

<p>It always helps when reaching out to the people who actually sponsor events at your company to make a strong case based on facts instead of complaining about the lack of diversity in sponsored events of the past.</p>

<p>If you find yourself in one of these roles, and want to showcase the diversity in our web world, please do try out these and let me know how they worked for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markup-free icon fonts using unicode-range]]></title>
    <link href="http://nimbupani.github.com/markup-free-icon-fonts-with-unicode-range.html"/>
    <updated>2012-12-25T08:58:00-08:00</updated>
    <id>http://nimbupani.github.com/markup-free-icon-fonts-with-unicode-range</id>
    <content type="html"><![CDATA[<p>I used icon fonts extensively while designing <a href="http://fripfrap.io">fripfrap.io</a>. Unfortunately, icon fonts require tags wrapped around where they should be placed, and I went on a quest to find out if we can adaptively render icon fonts without any extra markup.</p>

<h2>Icon Fonts</h2>

<p>Icon fonts are easy clean way to render icons across all sizes of text. The other advantage is you can apply all the text controls that are available including <code>text-shadow</code>, <code>vertical-align</code>, <code>font-size</code> to tweak the output as you like, instead of fiddling around in SVG or with image sprites (<a href="http://blog.pictonic.co/post/32869817328/svgs-are-cool-but-icon-fonts-are-just-10-of-their">here are more details on why icon fonts are better</a>). The typical usage of icon fonts as pioneered by <a href="http://lab.simurai.com/buttons/">@simurai</a> is:</p>

<pre>[data-icon]::before {
    content: attr(data-icon);
}</pre>


<p>Then, when you generate custom icon fonts using services like <a href="http://icomoon.io/app">icomoon</a>, you can specify a character that will be used to represent that icon and use that as the value of the icon in the mark-up. For example, to render the twitter icon, I select the Twitter icon from one of the various free icons available on icomoon, and then set the character to be 't' in the app, and download the font:</p>

<p><img src="http://s3.amazonaws.com/Gyazo/1356408460.png" alt="" /></p>

<p>In your markup, you declare:</p>

<pre>&lt;b data-icon=t>subscribe on twitter&lt;/b>
</pre>


<p>This markup in combination with the CSS we declared earlier, would <a href="http://codepen.io/nimbupani/pen/fdlLe">render the twitter icon like so</a>:</p>

<p><img src="http://s3.amazonaws.com/Gyazo/1356408772.png" alt="" /></p>

<h2>Problem with Using Icon Fonts via Generated Content</h2>

<p>The first problem with this technique is Screen readers would read the alphabet used for the property <code>content</code>. This means, a person who uses a screen reader to navigate would hear 't twitter' rather than just 'twitter'. This obviously is not so fun.</p>

<h2>Using Private Use Area for Icon Fonts</h2>

<p>Fonts are basically key value pairs, with the key being the character and the value a glyph (a path representation). For example, you see these letters in this post because the browser comes across a character, looks up the table for the font specified, &amp; uses that glyph to render that character (e.g. 'a' or 'b' or '.'). The universal standard that is being increasingly adopted is called <a href="http://www.joelonsoftware.com/articles/Unicode.html">Unicode</a>.</p>

<p>There is a whole range of key-value pairs within the Unicode table that are deliberately empty and that range is called Private Use Area (PUA).</p>

<p>We can use this area to reference icon fonts. Using <a href="http://icomoon.io/app">Icomoon's icon font generator</a>, you can specify your icon as the glyph to represent a character from this PUA range:</p>

<p><img src="http://s3.amazonaws.com/Gyazo/1356429440.png" alt="" /></p>

<p><a href="http://icomoon.io/#docs#screenreaders">Icomoon's documentation covers more details on how to use this</a>. Essentially, it is as simple as specifying the character used for the icon to be one from the Private Use Area (PUA) and using the HTML entity equivalent as a value for the <code>data-icon</code> attribute:</p>

<pre>&lt;b data-icon='&amp;#xe000;'>subscribe to twitter&lt;/b></pre>


<p>This would solve the problem of having screen readers read out icon fonts incorrectly, but it still leaves us with an extra set of tags, attribute (<code>data-icon</code>) &amp; associated style that I think we could do without. This we can do with the CSS property called <code>unicode-range</code>.</p>

<h2>Unicode Range</h2>

<p>I previously mentioned <code>unicode-range</code> in my <a href="http://nimbupani.com/jscamp-css-next.html">round-up of what is new in CSS</a>, &amp; how it can be used to <a href="http://24ways.org/2011/creating-custom-font-stacks-with-unicode-range/">enhance an existing ampersand</a>. I also have been wondering if unicode-range in combination with icon fonts set in Private Use Area could be used to render icons.</p>

<p>The markup then would merely be:</p>

<pre>&amp;#xe000; subscribe to twitter</pre>


<p>While the font-face declaration would change to:</p>

<pre>@font-face {
    font-family: 'icons';
    src: url(path/to/font.woff) format('woff');
    <b>unicode-range: U+E000-U+E005;</b>
}</pre>


<p>Then, when you define the base font:</p>

<pre>body {
   font-family: <b>icons</b>, sans-serif;
}</pre>


<p>This would render the icons inline with no other additions. This is nice, but previously with the <code>data-icon</code> process we could very easily hide or show icons based on Media/Feature queries by simply doing:</p>

<pre>@media (max-width: 400px) {
    [data-icon]::before { content: none; }
}</pre>


<p>But with inline icons, removing the font from the <code>font-family</code> would leave you with the empty rectangular glyph ():</p>

<p><img src="http://s3.amazonaws.com/Gyazo/1356426010.png" alt="" /></p>

<p>Does this mean, using unicode-range for fonts is a bust? Do we still need markup around these icons? There is a way out!</p>

<h2>Layout Font to the Rescue</h2>

<p>When I was wondering how to prevent this on Twitter, <a href="http://twitter.com/derschepp">Christian Schaefer</a> suggested the use of <a href="https://github.com/jonathantneal/layout-webfont">Layout Font</a> (a font that <a href="http://www.jonathantneal.com/">Jonathan Neal</a> invented to solve the problem of white-space impacting layouts using <code>display: inline-block</code> in CSS). The layout font merely replaces every glyph with what appears to be a "no space" in the font table. This will mean browsers when using this font would represent white space effectively as no space.</p>

<p>Now I was trying to figure out how to transform this font into one that would have this same "no space" as the value for all unicode characters. At this juncture, <a href="http://twitter.com/keyamoon">Keyamoon</a> came to the rescue by creating a <a href="http://codepen.io/Keyamoon/pen/bnwDL">base-64 encoded version of the layout font</a>.</p>

<p>And so, we are satisfied! Here is an example of how to use icon fonts with <code>unicode-range</code> but with a graceful fallback in case we do not want to render these icons any more.</p>

<pre>@font-face {
    font-family: space;
    src: url(data:application/x-font-woff;charset=utf-8;base64,d09GRk9UVE8AAAOYAAsAAAAABUwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABDRkYgAAABCAAAAIQAAACQ1P+0gUZGVE0AAAGMAAAAGgAAABxjhaFsR0RFRgAAAagAAAAbAAAAIAAvAARPUy8yAAABxAAAAEsAAABgP9zcNGNtYXAAAAIQAAAAOgAAAUrgERK3aGVhZAAAAkwAAAAuAAAANvsbcvdoaGVhAAACfAAAAB0AAAAkBBD942htdHgAAAKcAAAACAAAAAgAAAAAbWF4cAAAAqQAAAAGAAAABgACUABuYW1lAAACrAAAAN4AAAGJ242MgnBvc3QAAAOMAAAADAAAACAAAwAAeJw9zUEKwjAQRuF/kkhKDa2WKgqjZ8gJXHoBj+CqSJtNK3gCkdnmsLMQFEHdvdX3CM6BiIrunPqUBpAB4aBsdGd14yRYCW5fYntqXiL/CF4umnWcMa41AwvGbcnwjEcD+zEK1FhPQ3eMMX7x3wOgOwyRmVc6umfW7CtpZSWhfANCyyLweJxjYGBgZACCk535hiD6zD9JWRgNAEIVBfQAAHicY2BkYGDgA2IJBhBgYmCEQhYwjwEABFUANAB4nGNgZvzCOIGBlYGD0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAMBBJMhIM01hcHhA8MHBsYH/x8w6DE+YFBoYGBghCtQAEJGAGqIDSIAeJxjYGBgZoBgGQZGBhBwAfIYwXwWBg0gzQakGRmYGBg+MPz/D1IAoQUYoeqBgJGNAcEZoQAAbecGtwAAeJxjYGRgYADiTz08rvH8Nl8ZuJkYQODMP0lZBP3/ARMD4wMgl4MBLA0AIQUKSgAAeJxjYGRgYHzw/wGDHgMQ/GNgAnIZUAETAG2yA/MAAAAAAAAAAAAAAAAAUAAAAgAAeJx1jjFOAzEQRd8mmyAUhKgQpQsKml3ZVqocYEVNkT6KrNVKSSw5SZOD0HIESo7BATgCl+DHcUMRSyM/f/+ZP8Ad71ScT8UND4VH4pfCY545Fa6lfxaeMOO78FT6r5xVfSvlPnedeSR+KjzmFVu4lv5ReMIjX4Wn0n8YWBPZqiI7GNZxG6PgjUDPkQ0rkp6hP25Wgi77DvlOcgQMnlZphoXq/7yL5pnT4HQ3KpuJLu4OXUx9ML61ZmFKssjPG+cbb51c19ZbKjix1/8lxuUVWIa0HzTEtfZq7x+jCTpIAAB4nGNgZsALAAB9AAQ=) format('woff');
}

body { font-family: <b>icons</b>, sans-serif; }

@media (max-width: 400px) {
    body { font-family: <b>space</b>, sans-serif; }
}</pre>


<p>You can see this <a href="http://nimbu.in/private-use-unicode">adaptive icon font in action here</a>.</p>

<h2>Browser Support</h2>

<p>Why do you trouble me with reality? :| I previously erroneously stated that <code>unicode-range</code> is supported amongst all browsers, but this is not the case. It is only supported in Safari &amp; Chrome.</p>

<p>This method maybe useful when <code>unicode-range</code> is more widely supported, but all I wanted to do was to find new ways to kill fluffy markup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSCamp: CSS Next]]></title>
    <link href="http://nimbupani.github.com/jscamp-css-next.html"/>
    <updated>2012-12-01T06:09:00-08:00</updated>
    <id>http://nimbupani.github.com/jscamp-css-next</id>
    <content type="html"><![CDATA[<p>I talked at <a href="http://jscamp.asia">JSCamp</a> on 28th November 2012, on some of the newer features of CSS. I gave the talk without slides, so here is a description of all that I covered.</p>

<h2>No CSS3 or CSS4</h2>

<p>Before I delve into what the newer features of CSS that I am very interested in are, I want to clarify a myth that persists on how there are varying ‘versions’ of CSS like CSS3 and CSS4. <a href="http://www.xanthir.com/b4Ko0">Tab Atkins wrote in detail about why there is no CSS3</a>. Essentially, work after <a href="http://www.w3.org/TR/CSS21/">CSS 2.1 specification</a> has been split into independent modules that can all reach stability independent of each other, so specifications can become stable and recommendations faster.</p>

<h2>Typography</h2>

<p>The <a href="http://dev.w3.org/csswg/css3-fonts/">Font Module</a> has a couple of interesting features that are worth looking at.</p>

<h3>Open Type Features</h3>

<p><a href="http://timepiece.inostudio.de/"><img src="http://s3.amazonaws.com/Gyazo/1354317414.png" alt="" /></a></p>

<p>Open Type Fonts have a features file that exposes ligatures (and other features) to applications that understand and enable these. Till recently browsers did not have the ability to expose these features that would allow you to use these ligatures from within stylesheets. But now you can.</p>

<p>To do this, you would have to use <code>font-feature-settings</code> like so (you must add the appropriate prefixes <code>-ms</code>, <code>-webkit-</code> &amp; <code>-moz-</code> &amp; <code>-o-</code> when Opera supports it):</p>

<pre>h1 {
 font-feature-settings: 'liga';
}</pre>


<p>This tells the browser to enable Common Ligatures in the Open Type font.</p>

<p>Georg Seifert of <a href="http://glyphsapp.com">Glyphs</a> has created a very cool font that <a href="http://timepiece.inostudio.de/">exploits these ligatures to create a lovely clock</a>.</p>

<h3>Unicode Range</h3>

<p>Fonts are essentially a table of glyphs that represent each code point. Browsers look up the table for each code point and render that glyph on the screen.</p>

<p>The @font-face rule used to specify web fonts can include a declaration for <a href="http://dev.w3.org/csswg/css3-fonts/#unicode-range-desc"><code>unicode-range</code></a>. When this property is declared, the browser knows that the font specified in the <code>@font-face</code> rule must only be used when that range of <a href="http://www.joelonsoftware.com/articles/Unicode.html">unicode code points</a> are found in text. This way, <a href="http://rishida.net/blog/?p=760">you can control the rendering of English letters when they occur in conjunction with letters of another language</a> instead of defaulting to system fonts. Here is how you would use them:</p>

<pre>@font-face {
  font-family: myJapanesefont;
  src: local('Bookman Antiqua');
  unicode-range: U+41-5A, U+61-7A, U+C0-FF;
}</pre>




<pre>h1 {
  font-family: myJapanesefont, MS-Mincho;
}</pre>


<p>But this property is also useful if you want to specify better ampersands or use fonts as icons.</p>

<h3>Better Ampersands</h3>

<p>A few years ago, it was all the rage to use a different font for the ampersands (&amp; symbol) than the current one. The way this was done was to wrap the symbol in a <code>&lt;span class='amp'&gt;</code> and then use a different font-family for the class <code>.amp</code>. With <code>unicode-range property</code>, you could merely use the @font-face rule to specify the font you want to use for that particular character (specified with <code>unicode-range</code>) and not bother at all with adding extra tags.</p>

<p>This method is described in detail by Drew McLellan in his <a href="http://24ways.org/2011/creating-custom-font-stacks-with-unicode-range/">24 Ways article</a>.</p>

<p><a href="http://nimbu.in/jscamp/unicode-range.html">Demo of using Baskerville font for &amp; symbol</a>.</p>

<h3>Font Icons</h3>

<p>The unicode tables have a private-use space allocated that would allow any font creator to use that space to create glpyhs that are not standard (e.g. glyphs that do not represent Latin, or other language characters or standardized symbols). Using this area of the table, you could create icons in a font, and only have these icons render on screen when the font itself is used.</p>

<p>This is what <a href="https://github.com/blog/1135-the-making-of-octicons">GitHub uses</a> for their <a href="https://github.com/styleguide/css/7.0">Octicons</a>.</p>

<h2>Layout</h2>

<h3>Exclusions</h3>

<p><a href="http://dev.w3.org/csswg/css3-exclusions/">Exclusions</a> would allow you to wrap text within a specified shape. Currently an implementation of <code>shape-inside</code> property that would allow text to wrap <em>within</em> a path is available in Chrome Canary. <a href="http://twitter.com/bear_travis">Bear Travis</a> wrote <a href="http://betravis.github.com/shape-tools/polygon-drawing/">a tool for determining polygon shapes</a> that can be used for generating the path. In brief, you would use it as such:</p>

<pre>.crow {
  shape-inside: polygon(0 0, 0 100%, 100% 100%, 100% 0);
}</pre>


<p><a href="http://nimbu.in/jscamp/shape-inside.html">Demo of shape-inside</a> (<em>turn on 'Enable Experimental WebKit Features' in chrome:flags in Chrome Canary to see this</em>)</p>

<h3>Regions</h3>

<p><a href="http://dev.w3.org/csswg/css3-regions/">Regions specification</a> has features that allows your content to be separate from the layout structure.</p>

<p>First you declare which elements will be part of the named flow of content:</p>

<pre>.news-items {
  flow-into: newsflow; /* name of the flow */
}</pre>


<p>Then, you declare which elements will be the recepients of the content within the named flow:</p>

<pre>.news-items-container {
  flow-from: newsflow; /* name of the flow */
}</pre>


<p>This means, all elements that have the class <code>news-items-container</code> will no longer display content they originally had, but will only display content that flows into them through the named flow called <code>newsflow</code>.</p>

<p>The <a href="http://blogs.adobe.com/webplatform/2012/09/27/web-inspector-support-for-css-regions/">Web Inspector in Chrome Canary</a> has a way to debug which elements are part of a flow and which are recepients of a flow.</p>

<p><a href="http://nimbu.in/jscamp/regions.html">Demo of regions</a> (<em>turn on 'Enable Experimental WebKit features' in chrome:flags in Chrome Canary to see this</em>)</p>

<h2>Graphics</h2>

<h3>Native Filters</h3>

<p>It is now possible to use image processing functions such as <code>greyscale</code>, <code>sepia</code>, <code>blur</code> on HTML and SVG elements. You can do this by using a CSS property known as <code>filter</code> like so:</p>

<pre>.banner {
  filter: blur(10px);
}</pre>


<p>These are known as <em>native</em> filters as the functions are provided out of the box by browsers. You can use this feature in Safari 6, Mobile Safari &amp; Chrome.</p>

<p>Here is how blur has been used to <a href="http://codepen.io/vcurd">simulate depth of field</a>.</p>

<h3>Custom Filters</h3>

<p>Instead of using browser-provided filters, you can use your own. To do this, you would use <a href="http://www.w3.org/TR/filter-effects/#feCustomElement">GLSL shaders</a> - that are typically used in WebGL - via custom filter function.</p>

<pre>.banner {
 filter: custom(url(/path/to/shader.vs));
}</pre>


<p>The above declaration tells the browser to create vertice maps for each element that matches the selector, run them through the shader provided within the custom function and finally render the results on the screen. The interesting thing is these shaders can also take custom arguments that would determine the extent to which you want to apply these shaders.</p>

<p><a href="http://twitter.com/alteredq">Altered Qualia</a> has a <a href="http://alteredqualia.com/css-shaders/article">great in-depth article on how to write and use Shaders for Custom Filtering</a>. You can also play with some of the custom filters on <a href="http://html.adobe.com/webstandards/csscustomfilters/cssfilterlab/">CSS FilterLab</a></p>

<p><a href="http://nimbu.in/jscamp/custom-filters.html">Demo of Custom Filters</a> (<em>turn on 'Enable CSS Shaders' in chrome:flags in Chrome Canary to see this</em>).</p>

<h3>Blend Modes</h3>

<p>In Photoshop and other Graphic Editing tools, there has always been an option to specify how each layer interacts with other layers below it. This is typically specified using a dropdown of blend modes that have values such as 'overlay', 'multiply', 'darken', 'lighten', 'difference', etc.</p>

<p>My team at Adobe has been working on a <a href="http://adobe.github.com/web-platform/demos/compositing/">specification and a prototype build</a> out that brings the power of those blend modes to the web via CSS. This would happen via specifying the property <code>blend-mode</code> on the elements you want to target:</p>

<pre>.banner h1 {
    blend-mode: difference; 
}</pre>


<p><a href="http://adobe.github.com/web-platform/demos/compositing/blend-photogallery/index.html">Demo of blend modes</a> (<em>use this <a href="https://github.com/adobe/webkit/downloads">prototype build of Chromium</a> to view this</em>).</p>

<h2>Responsible Styling</h2>

<p>You must use styles responsibly, especially properties such as flex box which can lead to drastically unreadable results in unsupported browsers. Previously, <a href="http://modernizr.com">Modernizr</a> came to the rescue. But now, there is a <a href="http://www.w3.org/TR/css3-conditional/">specification that adds conditional rules natively via <code>@supports</code></a>:</p>

<pre>@supports (font-feature-settings: ‘liga’) or
          (-webkit-font-feature-settings: 'liga') or
          (-moz-font-feature-settings: 'liga=1') {
  h1 {
    font-family: 'A Common Ligatured Font', serif;
  }
}</pre>


<p>Browsers that understand <code>@supports</code> would then check if any of the declarations (<code>font-feature-settings: 'liga'</code> or <code>-webkit-font-feature-settings: 'liga'</code>) is supported and if so, render the styles for the <code>h1</code> selector within the <code>@supports</code> rule. This way of writing CSS may be familiar to you via Media Queries.</p>

<p>This is a great way to do feature-detection natively and specify different rules when advanced features are supported while providing a basic but readable experience on other browsers. <a href="http://dev.opera.com/articles/view/native-css-feature-detection-via-the-supports-rule/">Chris Mills has written in greater depth about this rule on dev.opera.com</a></p>

<p><code>@supports</code> rule is available in Opera and Firefox (under a flag), and <a href="http://trac.webkit.org/changeset/131783">soon in WebKit</a>.</p>

<p><a href="http://nimbu.in/jscamp/supports.html">Demo of @supports rule</a> (<em>use Opera or Firefox 17+ with 'layout.css.supports-rule.enabled' set to true in <code>about:config</code></em>).</p>

<h2>Non-standard but interesting</h2>

<h3>Canvas as Background Image</h3>

<p>WebKit browsers have had, for more than 2 years, <a href="https://www.webkit.org/blog/176/css-canvas-drawing/">support for writing to a canvas that is used as a background image for elements</a>. This is specified as such:</p>

<pre>.banner {
  background-image: canvas(contextForCanvas);
}</pre>


<p>Instead of writing the pixels to the context of a Canvas element, you would write it to the context of that background image (<code>contextForCanvas</code>):</p>

<pre>
var context = document.getCSSCanvasContext(‘2d’, contextForCanvas, canvasWidth, canvasHeight);
</pre>


<p><a href="http://nimbu.in/jscamp/css-canvas.html">Demo of canvas as <code>background-image</code></a> (<em>please use Safari or Chrome to view this</em>)</p>

<h3>Elements as Background Image</h3>

<p>The use of canvas as a background image is somewhat similar to a <a href="https://hacks.mozilla.org/2010/08/mozelement/">Mozilla proposal to have elements as background images</a>:</p>

<pre>
.banner {
  background-image: element(#elementID);
}</pre>




<pre>
&lt;div class='banner'&gt;This is a banner&lt;/div&gt;
&lt;p id='elementID'&gt;This is the element that will be a background.&lt;/p&gt;
</pre>


<p><a href="http://twitter.com/simurai">Simurai</a> created <a href="http://jsfiddle.net/simurai/JKZTu/21/show/">this interesting kalaidescope effect using this property</a>.</p>

<p>Personally, I find the <code>element</code> function confusing and easy to make mistakes with (e.g. adding a twitter widget to a supposedly empty element suddenly has it appear as a background to another element). Hopefully, some middle-ground between canvas as a background image and elements as a background image will be arrived at.</p>

<h2>In Conclusion</h2>

<p>There are lots of new and interesting features out there and it would be <em>awesome</em> if you could take the time to play with them and <a href="http://lists.w3.org/Archives/Public/www-style/">provide feedback</a>. There are plenty of new features I did not cover because I thought I was out of time (I wasn’t!) like <a href="http://css-tricks.com/old-flexbox-and-new-flexbox/">Flexbox</a>, <a href="http://dev.w3.org/csswg/css3-grid-layout/">Grid Layout</a>, <a href="http://css3.bradshawenterprises.com/blog/css-variables/">Variables</a>, <a href="https://developer.mozilla.org/en-US/docs/CSS/calc">Calc()</a>, and more.</p>

<p>My talk was just several browsers each with pinned tabs of each demo. <a href="http://nimbu.in/jscamp/">Here is a list of all of the demos I showed</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Updates]]></title>
    <link href="http://nimbupani.github.com/some-updates.html"/>
    <updated>2012-11-22T17:43:00-08:00</updated>
    <id>http://nimbupani.github.com/some-updates</id>
    <content type="html"><![CDATA[<p>While this website has been lying dormant, I have been doing many things that are more actively tracked on <a href="http://twitter.com/divya">twitter</a>. Here are some of the highlights of what I have been up to.</p>

<h2>Adobe</h2>

<p>Some of you know I now work at Adobe. But I have since June been the Product Manager for the Web Engine team! I had not previously lived a life of a Product Manager, but for every programmer out there who thinks it is a better life, think again! I find it easier to program than to convince humans.</p>

<h2>Fripfrap</h2>

<p>So <a href="http://twitter.com/garannm">Garann</a> and I have a regular podcast/video stream going on. We didn't speak about it much because we were not sure if we really wanted to do it. But, after recording 3 episodes, I think it is worth your while to spend 20 minutes of your life on :) <a href="http://fripfrap.io">Check it out</a>!</p>

<h2>Book</h2>

<p>I have also been up to my gills writing a book on HTML5 Boilerplate. The toughest part of writing a technical book is how often code changes. <a href="http://twitter.com/necolas">Nicolas Gallagher</a> has been doing such an excellent job of maintaining <a href="http://html5boilerplate.com">HTML5 Boilerplate</a> that it was many times I had to rewrite a lot of chapters based on newer updates. Nevertheless, I <strong>still</strong> need to write more errata as there are already updates while the book went out to print!</p>

<p>You can <a href="http://www.packtpub.com/html5-boilerplate-web-development/book">purchase the book at Packt</a> or get a <a href="http://www.amazon.com/HTML5-Boilerplate-Web-Development-ebook/dp/B009RR0IFE">Kindle version on Amazon</a>. If you have already got your copy, please let me know if you have any feedback!</p>

<p>The money I earn on this book goes to <a href="http://www.givewell.org/international/top-charities/AMF">Against Malaria Foundation</a> which consistantly is lauded for its effective aid programmes.</p>

<h2>Talks</h2>

<p>I have been giving several talks over the few months in Australia, New Zealand, France, Germany, UK and in US. I thought I would round up the major topic areas and link to videos of the talks as they exist:</p>

<h3>Designing in the browser</h3>

<iframe width="560" height="315" src="http://www.youtube.com/embed/h52uumn3sZc?rel=0" frameborder="0" allowfullscreen></iframe>


<p>I posit that modern web technologies require designers to use the medium to design for it. <a href="http://nimbu.in/codemelb">Slides for Designing in the Browser</a></p>

<h3>Pushing the cutting edge forward</h3>

<iframe src="http://player.vimeo.com/video/49730056?badge=0" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>A talk on what standards are, how they are created and how to effectively contribute to shaping how standards evolve without losing your mind. I gave the same talk @ SF HTML5 Meetup, which has the more up to date content. <a href="http://nimbu.in/sfhtml5/">Slides for Pushing the Cutting Edge Forward</a></p>

<h3>Web Components with your favourite CSS Specs</h3>

<iframe width="560" height="315" src="http://www.youtube.com/embed/FO3hTypPB1U?rel=0" frameborder="0" allowfullscreen></iframe>


<p>A talk on how to use the Shadow DOM with some new exciting CSS Specifications along with some important things to note while using these specs in tandem. <a href="http://nimbu.in/jsconfeu/">Slides for Web Components with your favourite CSS Specs</a></p>

<p>I will be giving a talk on what's next for CSS at <a href="http://jscamp.asia">jscamp.asia</a>. There is a good mix of interesting people coming by, so if you are in that region, please do come to the conference!</p>

<h2>Dotfiles</h2>

<p>I finally found the time to customize my dotfiles! I started with <a href="https://github.com/mathiasbynens/dotfiles">Mathias Bynens's dotfiles</a> as was recommended on <a href="http://dotfiles.github.com">Github</a> and then went over to the others. But finally ended up on <a href="http://github.com/necolas/dotfiles">Nicolas Gallagher's dotfiles</a> as they were most well-organized &amp; written. I added an AWS CLI as I upload my screen captures to AWS S3 bucket and some other tiny aliases that I thought was useful.</p>

<p>I hope to spend my vacation writing my own website generator as one is bound to do and get rid of Octopress monolith! I hope you have a great holiday season!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Object Model]]></title>
    <link href="http://nimbupani.github.com/css-object-model.html"/>
    <updated>2012-06-18T10:48:00-07:00</updated>
    <id>http://nimbupani.github.com/css-object-model</id>
    <content type="html"><![CDATA[<p>Until <a href="http://testthewebforward.org">Test the Web Forward</a> I had just a vague idea of what CSS Object Model does. So, it was awesome to hear from and learn about the <a href="http://dev.w3.org/csswg/cssom/">CSS Object Model</a> from the spec co-editor <a href="https://twitter.com/gasubic/">Glenn Adams</a>.</p>

<h2>What it is</h2>

<p>The CSS Object Model specification provides APIs that allow you to query and manipulate styles once the browser reads and understands the stylesheets and inline styles that are used on the page that is being rendered. An older specification that standardizes this was called DOM Level 2 Style Specification. It was the first specification that provided ability to access and manipulate styles via JavaScript using the DOM API.</p>

<p>The fragmented history of the web sadly means most of these APIs do not quite work the way they are intended to in many browsers. Glenn wrote in to state what the goals of the current specs are, which include:</p>

<ul>
<li>Fully specify behavior that was left unstated, vague, or ambiguous in DOM-2 Style spec.</li>
<li>Remove functionality specified in DOM-2 Style that is not widely implemented and not perceived as necessary.</li>
<li>Add functionality not specified in DOM-2 Style that has been widely implemented and is viewed as sufficiently important.</li>
</ul>


<p>The APIs from the specification that have been implemented so far offer the abilitiy to query rules specified in the stylesheets or a text representation of the styles in a stylesheet or the inline styles of an element within the rendered page. For example, you can get the value of <code>margin</code> of an element by using <code>getComputedStyle('element,optional pseudoElement').margin</code>. You can also get the full style declaration that applies to an element as a string by using <code>getComputedStyle('element,optional pseudoElement').cssText</code>.</p>

<h2>The <code>CSSStyleDeclaration</code> Object</h2>

<p>The <code>getComputedStyle</code> method retuns what is known as a <code>CSSStyleDeclaration</code> object. It enumerates all style properties (&amp; values). This is the object that is returned whenever you query for style information using:</p>

<ul>
<li><p><code>document.styleSheets[0].cssRules[0].style</code></p></li>
<li><p><code>Element.style</code></p></li>
<li><p><code>document.getOverrideStyle</code> (unimplemented in most browsers, but would be useful for <a href="http://stackoverflow.com/questions/9798210/is-there-any-way-to-reset-after-before-css-rules-for-an-element">getting/setting hover, and other pseudo-classes</a>).</p></li>
<li><p><code>window.getComputedStyle</code></p></li>
</ul>


<p>The returned object itself can be changed (it is <em>mutable</em> which means you can set a style property like <code>Element.style.margin = "20px"</code>) in all cases except the last. If you try to change a property of the object returned by <code>window.getComputedStyle(Element)</code>, you would get an exception.</p>

<h2>CSS Rules</h2>

<p>Rules within stylesheets have an object model too. There are 6 kinds of <a href="http://nimbupani.com/css-vocabulary.html">CSS rules</a> that could apply:</p>

<ul>
<li>Style rules (e.g <code>h1 {}</code> or <code>#main a {color: red; }</code>)</li>
<li>@import rules (e.g. <code>@import url(main.css)</code>)</li>
<li>Page rules (e.g. <code>@page :first {color: red; }</code>)</li>
<li>@font-face rules (e.g. <code>@font-face {}</code>)</li>
<li>Namespace rules (e.g. <code>@namespace svg http://svg.org</code>)</li>
<li>Media rules (e.g. <code>@media (min-width: 200px)</code>)</li>
</ul>


<p>Not only that but you can even access the individual selectors that you specified in your style sheet. The values for properties in selectors are also serialised. How these values are serialised has also been documented in the specification. For example, if an element has a style property set (inline or set from within a stylesheet) like so <code>margin: 20px 20px 20px 20px;</code>, the specification states that when you access the style using <code>cssText</code> it should return <code>margin: 20px;</code>.</p>

<h2>Testing CSS Values</h2>

<p>The above serialization of CSS values seemed trivial and I thought would be a good test to start with. So, I wrote a <a href="https://dl.dropbox.com/u/952/ttwf/index.html">small test</a>. The results were interesting:</p>

<ul>
<li>Firefox &amp; IE 9 were the only browsers that returned the expected value of <code>"margin: 20px"</code></li>
<li>Chrome returned <code>"margin: 20px; "</code> (note the whitespace after the semi-colon)</li>
<li>Opera bizarrely returns <code>"margin-top: 20px; margin-bottom: 20px; margin-left: 20px; margin-right: 20px"</code> (also note the missing last semi-colon).</li>
<li>Safari returned <code>"margin-top: 20px; margin-right: 20px; margin-bottom: 20px; margin-left: 20px; "</code> (note the space after the last semi-colon).</li>
</ul>


<p>Imagine the frustration of someone trying to write a CSS Style editor and wanting to show CSS style rules correctly! Glenn tells me that radical differences like these exist because the original DOM 2 Style spec did not document the serialization rules (he also pointed to this <a href="http://lists.w3.org/Archives/Public/www-style/2012Jan/1122.html">thread that discusses which properties get serialized or not</a>).</p>

<p>Hopefully, because of Test the Web Forward, we can have more such tests in the future to ensure all browsers implement these APIs and specifications correctly. There are many other APIs available in the CSS OM. Interestingly, I was made aware of the longest property name (proprietary though) in existence: <del><code>-webkit-match-nearest-mail-blockquote-color</code></del> (thanks to <a href="http://twitter.com/awesomekling">Andreas Kling</a> this is <a href="http://trac.webkit.org/changeset/120735">no longer the case</a>, it is now <code>-webkit-border-bottom-right-radius</code>) (I wonder what is the shortest?).</p>

<p>If you are interested in writing and contributing CSS tests, first <a href="https://test.csswg.org/shepherd/register/">make an account</a> (please do make sure to check the box for 'Request Repository Write Access') and then follow along with <a href="http://adobe.github.com/web-platform/presentations/test-the-web-forward-tutorial/index.html">this presentation</a> by <a href="http://twitter.com/JacobG415">Jacob Goldstein</a> &amp; <a href="http://twitter.com/RebeccaHauck">Rebecca Hauck</a>.</p>

<p><em>Many thanks to Glenn Adams &amp; Paul Irish for reviewing this post.</em></p>
]]></content>
  </entry>
  
</feed>
